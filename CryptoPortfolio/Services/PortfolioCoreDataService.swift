//
//  PortfolioCoreDataService -  –∫–ª–∞—Å, —è–∫–∏–π –∑–∞–±–µ–∑–ø–µ—á—É—î –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É Core Data
//

import Foundation
import CoreData

final class PortfolioCoreDataService {
    
    // –ü—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
    @Published var savedEntity: [PortfolioEntity] = []
    
    // –ü—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è Core Data
    private let container: NSPersistentContainer
    
    // –ù–∞–∑–≤–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–∞ —Å—É—Ç–Ω–æ—Å—Ç—ñ Core Data
    private let nameOfContainer = "PortfolioData"
    private let nameOfEntity = "PortfolioEntity"
    
    init() {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Core Data
        container = NSPersistentContainer(name: nameOfContainer)
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ö–æ–≤–∏—â –¥–∞–Ω–∏—Ö Core Data
        container.loadPersistentStores { _ , error in
            if let error = error {
                print("[üî•] Error download CoreData: \(error.localizedDescription)")
            }
        }
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑ Core Data
        getPortfolio()
    }
    
    // MARK: - –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏
    func updatePortfolio(coin: CoinModel, amount: Double) {
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –º–æ–Ω–µ—Ç–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—ñ
        if let entity = savedEntity.first(where: { $0.coinID == coin.id }) {
            
            if amount > 0 {   // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –±—ñ–ª—å—à–∞ –∑–∞ 0, –æ–Ω–æ–≤–∏—Ç–∏ —ó—ó
                updateCoin(entity: entity, amount: amount)
            } else {  // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –º–µ–Ω—à–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 0, –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó –∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                deleteCoin(entity: entity)
            }
        } else {  // –Ø–∫—â–æ –º–æ–Ω–µ—Ç–∏ –Ω–µ–º–∞—î –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—ñ, –¥–æ–¥–∞—Ç–∏ —ó—ó
            addCoin(coin: coin, amount: amount)
        }
    }
    
    //MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –º–æ–Ω–µ—Ç–∏ –¥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    private func addCoin(coin: CoinModel, amount: Double) {
        let entity = PortfolioEntity(context: container.viewContext)
        entity.coinID = coin.id
        entity.amount = amount
        applyChanges()
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–æ–Ω–µ—Ç–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—ñ
    private func updateCoin(entity: PortfolioEntity, amount: Double) {
        entity.amount = amount
        applyChanges()
    }
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–Ω–µ—Ç–∏ –∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    private func deleteCoin(entity: PortfolioEntity) {
        container.viewContext.delete(entity)
        applyChanges()
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑ Core Data
    private func getPortfolio() {
        let request = NSFetchRequest<PortfolioEntity>(entityName: nameOfEntity)
        do {
            savedEntity = try container.viewContext.fetch(request)
        } catch let error {
            print("[üî•] Error fetching CoreData: \(error.localizedDescription)")
        }
    }
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω —É Core Data
    private func saveData() {
        do {
            try container.viewContext.save()
        } catch let error {
            print("[üî•] Error saving CoreData: \(error.localizedDescription)")
        }
    }
    
    // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Core Data –ø—ñ—Å–ª—è –∑–º—ñ–Ω
    private func applyChanges() {
        saveData()
        getPortfolio()
    }
}
